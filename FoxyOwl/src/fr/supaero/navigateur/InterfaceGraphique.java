package fr.supaero.navigateur;

import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.Vector;

import javax.swing.*;

import fr.supaero.tags.ListeMarquePage;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewApplication.java
 *
 * Created on 13 févr. 2011, 11:39:27
 */

/**
 * 
 * interface graphique principale, contient la plupart des listeners, ne gere pas l'affichage des pages
 * 
 * @author <a href="mailto@daniel.jartoux@isae.fr"> Daniel Jartoux </a>
 * @author <a href="mailto@o.ben-abbes@isae.fr"> Othman Ben Abbes </a>
 * @version 0.8
 */
public class InterfaceGraphique extends javax.swing.JFrame {

	/** Creates new form NewApplication */
	public InterfaceGraphique(Historique h, ListeMarquePage lmp) {
		initComponents(h, lmp);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	/**
     * 
     */
	private void initComponents(final Historique h, final ListeMarquePage lmp) {

		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

		jInternalFrame1 = new javax.swing.JInternalFrame("FoxyOwl");
		jTabbedPane1 = new javax.swing.JTabbedPane();
		fermeronglet = new javax.swing.JButton();
		nouvelOngletBouton = new javax.swing.JButton();
		menuBar = new javax.swing.JMenuBar();
		fileMenu = new javax.swing.JMenu();
		jMenuItemediter = new javax.swing.JMenuItem();
		jMenuItemfermer = new javax.swing.JMenuItem();

		historiqueMenu = new javax.swing.JMenu();
		consultationprivee = new javax.swing.JMenuItem();
		consulterhistorique = new javax.swing.JMenuItem();
		sitesHistoriques = new Vector<javax.swing.JMenuItem>();

		marquepageMenu = new javax.swing.JMenu();
		ajouterFavoris = new javax.swing.JMenuItem();
		gererFavoris = new javax.swing.JMenuItem();
		sitesFavoris = new Vector<javax.swing.JMenuItem>();
		
		exitMenuItem = new javax.swing.JMenuItem();
		ongletactif = new OngletActif();

		premierOnglet = new NouvelOnglet("Onglet1", 1, jTabbedPane1,
				ongletactif, null, h);

		this.addWindowListener( new WindowAdapter()
		{
			public void windowClosing (WindowEvent e)
			{
				exitMenuItemActionPerformed(h, lmp);
			}
		});
		
		jInternalFrame1.setVisible(true);

		javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(
				jInternalFrame1.getContentPane());
		jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
		jInternalFrame1Layout.setHorizontalGroup(jInternalFrame1Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 0, Short.MAX_VALUE));
		jInternalFrame1Layout.setVerticalGroup(jInternalFrame1Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 0, Short.MAX_VALUE));

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		// on ajoute un onglet initial
		jTabbedPane1.addTab(premierOnglet.getOnglet().getSite().getTitre(),
				premierOnglet.jPanel1);

		nouvelOngletBouton.setText("+");
		fermeronglet.setText("Fermer l'onglet");
		fileMenu.setText("Fichier");

		jMenuItemediter.setText("Editer");
		fileMenu.add(jMenuItemediter);

		jMenuItemfermer.setText("Fermer");
		
		//TODO role item jMenuItemfermer ?
		// fileMenu.add(jMenuItemfermer);

		exitMenuItem.setText("Quitter");

		fileMenu.add(exitMenuItem);

		menuBar.add(fileMenu);

		historiqueMenu.setText("Historique");
		
		consultationprivee.setText("-> consultation privee");
		historiqueMenu.add(consultationprivee);
		
		consulterhistorique.setText("Consulter l'historique");
		historiqueMenu.add(consulterhistorique);
		
		// ajout des sites de l'historique
		for (int i = h.getHistorique().size() - 1; (i >= 0)
				&& (i >= h.getHistorique().size() - 10); i--) {
			sitesHistoriques.add(new JMenuItem(h.getHistorique().get(i)
					.getTitre()));
			historiqueMenu.add(sitesHistoriques.get(h.getHistorique().size()
					- 1 - i));
			final String url = h.getHistorique().get(i).getUrl();
			final String tit = h.getHistorique().get(i).getTitre();

			sitesHistoriques.get(h.getHistorique().size() - 1 - i)
					.addActionListener(new java.awt.event.ActionListener() {

						public void actionPerformed(ActionEvent arg0) {
							NouvelOnglet nouvelonglet = new NouvelOnglet(tit,
									jTabbedPane1.getTabCount() + 1,
									jTabbedPane1, ongletactif, url, h);

							jTabbedPane1
									.addTab(nouvelonglet.getOnglet().getSite()
											.getTitre(), nouvelonglet.jPanel1);
							jTabbedPane1.setSelectedIndex(nouvelonglet
									.getOnglet().getPosition() - 1);
						}
					});

		}

		menuBar.add(historiqueMenu);

		marquepageMenu.setText("Favoris");
		ajouterFavoris.setText("Ajouter aux favoris");
		gererFavoris.setText("Gerer les favoris");
		
		marquepageMenu.add(ajouterFavoris);
		
		// TODO gerer favoris
		// marquepageMenu.add(gererFavoris);

		// ajout des sites des favoris
		for (int i = lmp.getListemp().size() - 1; i >= 0; i--) {
			sitesFavoris.add(new JMenuItem(lmp.getListemp().get(i)
					.getTitre()));
			marquepageMenu.add(sitesFavoris.get(lmp.getListemp().size()
					- 1 - i));
			final String url = lmp.getListemp().get(i).getURL();
			final String tit = lmp.getListemp().get(i).getTitre();

			sitesFavoris.get(lmp.getListemp().size() - 1 - i)
					.addActionListener(new java.awt.event.ActionListener() {

						public void actionPerformed(ActionEvent arg0) {
							NouvelOnglet nouvelonglet = new NouvelOnglet(tit,
									jTabbedPane1.getTabCount() + 1,
									jTabbedPane1, ongletactif, url, h);

							jTabbedPane1
									.addTab(nouvelonglet.getOnglet().getSite()
											.getTitre(), nouvelonglet.jPanel1);
							jTabbedPane1.setSelectedIndex(nouvelonglet
									.getOnglet().getPosition() - 1);
						}
					});

		}


		menuBar.add(marquepageMenu);

		setJMenuBar(menuBar);
		
		jMenuItemediter.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Onglet o = ongletactif.getOngletactif().get(jTabbedPane1.getSelectedIndex());
				new EditWikiInterface(o.getSite().getUrl()).setVisible(true);
			}
		});
		
		ajouterFavoris.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				Onglet o = ongletactif.getOngletactif().get(jTabbedPane1.getSelectedIndex());
				new MarquerCettePageInterface(lmp, o.getSite()).setVisible(true);
			}
		});
		
		
		consultationprivee.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				if (h.isRecherche_privee()) {
					h.setRecherche_privee(false);
					consultationprivee.setText("-> consultation privee");
				}
				else {
					h.setRecherche_privee(true);
					consultationprivee.setText("-> consultation normale");
					
				}
				}
		});
		
		consulterhistorique.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				new HistoriqueInterface(h).setVisible(true);
			}
		});
		
		exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitMenuItemActionPerformed(h, lmp);
			}
		});

		nouvelOngletBouton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						int num = jTabbedPane1.getTabCount() + 1;
						String tit = "Onglet" + num;
						NouvelOnglet nouvelonglet = new NouvelOnglet(tit,
								jTabbedPane1.getTabCount() + 1, jTabbedPane1,
								ongletactif, null, h);

						jTabbedPane1.addTab(nouvelonglet.getOnglet().getSite()
								.getTitre(), nouvelonglet.jPanel1);
						jTabbedPane1.setSelectedIndex(nouvelonglet.getOnglet()
								.getPosition() - 1);

					}

				});

		fermeronglet.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				if (jTabbedPane1.getSelectedIndex() != -1) // si il y a au moins
															// un onglet
				{
					ongletactif.supprimer(jTabbedPane1.getSelectedIndex());
				jTabbedPane1.removeTabAt(jTabbedPane1.getSelectedIndex());
				}
			}

		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.LEADING,
						layout.createSequentialGroup()

						.addComponent(jTabbedPane1))
				.addGroup(
						javax.swing.GroupLayout.Alignment.LEADING,
						layout.createSequentialGroup()
								.addComponent(nouvelOngletBouton)
								.addComponent(fermeronglet))

		);
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.LEADING,
						layout.createSequentialGroup()

						.addComponent(nouvelOngletBouton)
								.addComponent(jTabbedPane1))

				.addGroup(javax.swing.GroupLayout.Alignment.LEADING,
						layout.createSequentialGroup()

						.addComponent(fermeronglet))

		);

		pack();
	}// </editor-fold>

	private void exitMenuItemActionPerformed(Historique h, ListeMarquePage lmp) {
		try {
			h.sauvegarder();
			lmp.sauvegarder();
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.exit(0);
	}
	


	/**
	 * @param args
	 *            the command line arguments
	 */

	// Variables declaration - do not modify

	private javax.swing.JInternalFrame jInternalFrame1;

	private javax.swing.JMenuBar menuBar;

	private javax.swing.JMenu fileMenu;

	private javax.swing.JMenuItem jMenuItemediter;
	private javax.swing.JMenuItem jMenuItemfermer;
	private javax.swing.JMenuItem exitMenuItem;

	private javax.swing.JMenu historiqueMenu;

	private javax.swing.JMenuItem consultationprivee;
	private javax.swing.JMenuItem consulterhistorique;
	private Vector<javax.swing.JMenuItem> sitesHistoriques;

	private javax.swing.JMenu marquepageMenu;

	private javax.swing.JMenuItem ajouterFavoris;
	private javax.swing.JMenuItem gererFavoris;
	private Vector<javax.swing.JMenuItem> sitesFavoris;

	private javax.swing.JTabbedPane jTabbedPane1;

	private javax.swing.JButton nouvelOngletBouton;
	private javax.swing.JButton fermeronglet;
	private NouvelOnglet premierOnglet;
	private OngletActif ongletactif;
	// End of variables declaration

}
